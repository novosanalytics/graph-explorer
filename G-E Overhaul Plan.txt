G-E Overhaul Plan:

1. Research the AWS Graph-Exploer updates for better object management
2. Replace the objects into new object mangement
3. Update the dependencies
4. Create the tutorial
5. To Be Continued ... 



=======================================================================
|| STEP 1: Research AWS Graph Explorer Updates for Object Management ||
=======================================================================
1. Dependency Updates
	i. pnpm 8.15.6
	ii. Set PNMP ENV directly
	iii. express >= 4.19.2
	iv. vite >= 4.5.3
	v. "@typescript-eslint/eslint-plugin": "^7.1.0",
	vi. "@typescript-eslint/parser": "^7.1.0",
	vii.  "eslint": "^8.57.0"
	viii.  "eslint-plugin-react": "^7.33.2",
	ix. "prettier": "3.2.5",
	x. "husky": "^9.0.11",

2. Minor Fixes
	i. SOURCE: packages/graph-explorer/src/index.css ::
		[[ 
			21. transform: rotate(-360deg);
			25. transform: rotate(0deg);
	
		]]

	ii.SOURCE: packages/graph-explorer/src/hooks/useUpdateSchema.ts
		[[ 
			21. const vertices = (currentSchema?.vertices || []).map(vertex => {
			24. total: vertex.total,
			33. total: edge.total,
			39. totalVertices: currentSchema?.totalVertices || 0,
			41. totalEdges: currentSchema?.totalEdges || 0,

3. Major Fixes I: Object Management
	i. Remove AbstractConnector
	ii. Introduce useGEFetchTypes
	iii. Introduce useGremlin.ts 
	iv. Introduce fetchVertexTypeCounts function
	v. Remove formattedVertexTypes and formattedEdgeType 
	vii. Remove filterByVertexTypes and filterCriteriaTeplat
	viii. Add type to DataExplorer
	

4. Major Fixes II: Auxillary Fixes
	i. added Schema object
	ii. added new functions totalFiltered	count
	iii. added vertexTypeSelector and edgeTypeSelector
	iv. Creates a config with the schema and makes it active, then renders the `useFiltersConfig` hook.
	v. Added TestSchema and better Testing
	vi. Request timeout increased
	vii. changed onExactMatchChange
	viii. Search improvements
	ix. Icon button improvements
	x. PNPM Updates
	xi. Added RenderNode






Update To Do:
-----------------------------------------------------

1. Change the Abstract Connector objects into GEFetchTypes
2. Integrate Schema Object (if necessary)
3. Integrate fetchVertexTypeCounts and fetchEdgeTypeCounts
4. PNPM updates 
5. Dynamic querying within subgraph filtering for nodes and edges (???)






Notes
--------------------------------------------------------
memoization -- saving a result prior instead of needing to call the function again
	- useful to save compute by creating a cached result for a function 

Overdate -- memoization to any specific data columns that have Record_Active and Record_Expiri in them?
	Ideal flow:
		- Take all objects on the canvas
		- Get the distinct object type of each edege and node (memoization could be useful here)
		- Add to query based on the specific 


React Hooks are better than Classes anyways
- instead of handling many classes, we can just encapsulatet the logic and state within the funcion

- easier for reusability because instead of relying on constructors and not needing to rely on declarations  



